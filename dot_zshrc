# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(macos git npm zsh-autosuggestions zsh-completions zsh-syntax-highlighting zsh-interactive-cd colorize copypath jsontools zsh-eza)

source $ZSH/oh-my-zsh.sh

# To add chroma syntax coloration with plugin colorize
ZSH_COLORIZE_TOOL=chroma


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
export PATH="/opt/homebrew/opt/mariadb@10.5/bin:$PATH"

export PATH="/Users/victor/Library/Python/3.8/bin:$PATH" 



export GITLAB_URL=https://gitlab.steelhome.internal
export GITLABBER_CLONE_METHOD=ssh
export GITLABBER_FOLDER_NAMING=path
export GITLABBER_INCLUDE='/galaxion/**,/itsffr**,/mtmc**'
export GITLABBER_GIT_CONCURRENCY=8


alias gitlabber_refresh='gitlabber --archived exclude -p --print-format yaml . > ~/.gitlabber-cache-steelhome.yaml'  # met a jour tous les projets en fonction du include / exclude
alias gitlabber_simple='gitlabber --archived exclude --file ~/.gitlabber-cache-steelhome.yaml .' # se contente de fetch tous les repos dispo dans le fichier de cache
alias gitlabber_full='gitlabber_refresh && gitlabber_simple' # fait les deux

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[[ ! -f ~/.fzf.zsh ]] || source ~/.fzf.zsh

source /Users/victor/.docker/init-zsh.sh || true # Added by Docker Desktop

klog(){
# Get all clusters from the kubeconfig file
CLUSTERS=$(grep "cluster:" ~/.kube/config | awk '{print $2}' | grep -v "cluster:" | sort -u)

# Select the desired cluster using fzf
CLUSTER=$(printf '%s\n' "${CLUSTERS[@]}" | fzf --layout=reverse --preview='echo {}')

# Select the first namespace of the cluster to set is as default context
CONTEXT=$(grep -A 1 "cluster:" ~/.kube/config | awk -v cluster="$CLUSTER" -F ": " '$0 ~ "cluster: "cluster {flag=1} flag && /namespace:/ {print $2; exit}')

CURRENT_CONTEXT=$(kubectl config current-context)
if [ "$CURRENT_CONTEXT" != "$CONTEXT" ]; then
  kubectl config use-context "$CONTEXT"
fi

# Get the namespaces for the selected cluster
NAMESPACES=$(kubectl get namespace --no-headers | awk '{print $1}')

# Select the wanted namespace
NAMESPACE=$(printf '%s\n' "${NAMESPACES[@]}" | fzf --layout=reverse --preview='echo {}')

# Get the pod list of the selected namespace
POD_NAMES=$(kubectl -n "$NAMESPACE" get pods --no-headers -o custom-columns=":metadata.name" | grep "$1")

# Select the wanted pod
POD_NAME=$(printf '%s\n' "${POD_NAMES[@]}" | fzf --layout=reverse --preview='echo {}')

# Prompt for the number of lines to tail
vared -p "Enter the number of lines to tail (default is 500): " -c NUM_LINES #vared is only for zsh
NUM_LINES=${NUM_LINES:-500}

# Display pod log
LAST_TIMESTAMP=""

while true; do
  kubectl -n "$NAMESPACE" logs "$POD_NAME" --since-time="$LAST_TIMESTAMP" --tail "$NUM_LINES" 2>/dev/null | grep -oE '{.*}' | jq -r  'include "module-color";
    (
      coltxt("\(.["@timestamp"])";"darkgray")
    + " "
    + coltxt("\(.logitem.level | (" " * (6 - length)) + .)"; logLevelColors[.logitem.level] // .logitem.level)
    + " "
    + coltxt("[\(.project.name),\(.tracing.trace_id),\(.tracing.span_id)]"; logLevelColors[.logitem.level] // .logitem.level)
    + coltxt(" --- ";"darkgray")
    + coltxt("[\(.logitem.thread_name | .[-15:] + " " * (15 - length))]";"darkgray")
    + " "
    + coltxt("\(.logitem.logger_name | split(".")[-1] | .[0:37] + if length > 37 then "..." else (" " * (40 - length)) end)";"cyan")
    + " "
    + "\(.logitem.message)" +
    if .logitem.stack_trace != null then
      "\n\(.logitem.stack_trace)"
    else
      ""
    end
    )';
    LAST_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ");
    sleep 5;
done
}

alias cat=bat
alias kubectl="kubecolor"

setopt hist_ignore_all_dups
setopt share_history



listConsumedApi() {
local path="${1:-$(pwd)}"  # Use provided path or current directory if not provided

# Go into the directory
cd "$path" || { echo "Failed to change directory to $path"; exit 1; }

# Output to markdown file
echo "## $path on version $branch"
echo "| Client                     | Http Method | API                                                |"
echo "|----------------------------|-------------|----------------------------------------------------|"

/usr/bin/grep -r -E '@(GetMapping|PostMapping|PutMapping|PatchMapping|DeleteMapping)\("[^"]*"' . | \
/usr/bin/awk -F'[@("]' '{print "| " $1 " | " $2 " | " $4 " |"}' | \
/usr/bin/sed 's/ //g'
echo ""

echo "Done $path"
}

